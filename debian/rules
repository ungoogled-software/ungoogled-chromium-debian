#!/usr/bin/make -f

# enable verbose build messages
export DH_VERBOSE=1

# enable all build hardening flags
export DEB_BUILD_MAINT_OPTIONS=hardening=+all

# indicate that binary targets do not require root
export DEB_RULES_REQUIRES_ROOT=no

# specify system LLVM (required for unbundling)
# you can set the LLVM_VERSION environment variable before building
# to change the LLVM toolchain version
export LLVM_VERSION?=9
export AR=llvm-ar-$(LLVM_VERSION)
export NM=llvm-nm-$(LLVM_VERSION)
export CC=clang-$(LLVM_VERSION)
export CXX=clang++-$(LLVM_VERSION)

# hack to allow clang to find the default cfi_blacklist.txt
RESOURCE_DIR:=$(shell $(CC) --print-resource-dir)
export CXXFLAGS+=-resource-dir=$(RESOURCE_DIR)
export CPPFLAGS+=-resource-dir=$(RESOURCE_DIR)
export CFLAGS+=-resource-dir=$(RESOURCE_DIR)

# more verbose linker output
export LDFLAGS+=-Wl,--stats

# initial flags from dpkg-buildflags
export DEB_CXXFLAGS_MAINT_STRIP=-g
export CXXFLAGS=$(shell dpkg-buildflags --get CXXFLAGS)

# extra flags to reduce warnings that aren't very useful
export CXXFLAGS+=-Wno-unused-function \
                 -Wno-unused-variable \

# do not optimize away null pointer safety checks
export CXXFLAGS+=-fno-delete-null-pointer-checks

# build using system toolchain
defines+=host_toolchain=\"//build/toolchain/linux/unbundle:default\"
defines+=custom_toolchain=\"//build/toolchain/linux/unbundle:default\"

# set the appropriate cpu architecture
DEB_HOST_ARCH ?= $(shell dpkg-architecture -qDEB_HOST_ARCH)
ifeq (i386,$(DEB_HOST_ARCH))
defines+=host_cpu=\"x86\" use_vaapi=true
endif
ifeq (amd64,$(DEB_HOST_ARCH))
defines+=host_cpu=\"x64\" use_vaapi=true
endif
ifeq (arm64,$(DEB_HOST_ARCH))
defines+=host_cpu=\"arm64\" use_vaapi=true
endif
ifeq (armhf,$(DEB_HOST_ARCH))
defines+=host_cpu=\"arm\" use_vaapi=false arm_use_neon=false symbol_level=0
endif

ungoogled_chromium_version=$(shell cat debian/ungoogled-upstream/version.txt)
ungoogled_chromium_files=debian/ungoogled-upstream/ungoogled-chromium

# add gn flags from ungoogled-chromium
defines+=$(shell cat $(ungoogled_chromium_files)/flags.gn | tr "\n" " " | sed 's/"/\\"/g')

# disabled features
defines+=is_debug=false \
         use_goma=false \
         use_ozone=false \
         use_sysroot=false \
         use_openh264=false \
         use_libjpeg_turbo=true \
         use_custom_libcxx=false \
         use_gnome_keyring=false \
         use_unofficial_version_number=false \
         enable_vr=false \
         enable_swiftshader=false \
         optimize_webui=false \
         linux_use_bundled_binutils=false \

# enabled features
defines+=use_gio=true \
         use_pulseaudio=true \
         link_pulseaudio=true \
         enable_widevine=true \
         v8_enable_backtrace=true \
         use_system_zlib=true \
         use_system_lcms2=true \
         use_system_libjpeg=true \
         use_system_freetype=true \
         use_system_harfbuzz=true \
         use_system_libopenjpeg2=true \
         concurrent_links=1 \
         proprietary_codecs=true \
         ffmpeg_branding=\"ChromeOS\" \
         fieldtrial_testing_like_official_build=true \
         is_clang=true \
         use_cups=true \
         use_kerberos=false \
         use_lld=true \

# some notes about embedded libraries
#  can't use system nss since net/third_party/nss is heavily patched
#  can't use system ots (open text *summarizer*) since that's not google's ots (open text *sanitizer*)

# handle parallel build options
njobs=1
ifneq (,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
njobs=$(patsubst parallel=%,%,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
endif

%:
	dh $@

out/Release/gn:
	./tools/gn/bootstrap/bootstrap.py --skip-generate-buildfiles -j$(njobs)

override_dh_auto_configure:
	# output compiler information
	$(CXX) --version
	# put yasm script in the location expected by gn
	ln -sf ../pdfium/third_party/yasm/run_yasm.py third_party/yasm
	# strip out system third_party libraries
	# NOTE: Removing base/third_party/libevent/BUILD.gn and build/config/freetype/freetype.gni in scripts/unbundle
	./debian/scripts/unbundle
	# clean polymer files manually (debian/clean doesn't work on directories)
	# NOTE: This is disabled because of the below
	#rm -rf third_party/catapult/third_party/polymer/components || true
	# apply domain substitution
	./debian/scripts/apply_domainsubstitution
	# use system flot
	for file in $(flotpaths); do ln -sf $$file third_party/flot; done
	# use polymer from chromium's top level third_party directory
	# NOTE: This is disabled because files here are patched, so it breaks rebuilds.
	# See https://github.com/Eloston/ungoogled-chromium/issues/899
	#ln -sf ../../../../third_party/polymer/v1_0/components-chromium third_party/catapult/third_party/polymer/components

override_dh_auto_build-arch: out/Release/gn
	./out/Release/gn gen out/Release --args="$(defines)" --fail-on-unused-args
	ninja -j$(njobs) -C out/Release chrome chrome_sandbox content_shell chromedriver

override_dh_auto_build-indep: out/Release/gn
	./out/Release/gn gen out/Release --args="$(defines)" --fail-on-unused-args
	ninja -j$(njobs) -C out/Release packed_resources

override_dh_prep:
	# building is done by this step; remove domain substitution
	./debian/scripts/revert_domainsubstitution
	dh_prep

override_dh_auto_install-arch:
	cp out/Release/chrome out/Release/chromium
	cp out/Release/content_shell out/Release/chromium-shell
	cp out/Release/chrome_sandbox out/Release/chrome-sandbox
	cp out/Release/locales/en-US.pak out/Release/resources
	chmod 4755 out/Release/chrome-sandbox # suid sandbox
	sed -e s/@@PACKAGE@@/chromium/g -e s/@@MENUNAME@@/Chromium/g \
	    < chrome/app/resources/manpage.1.in > out/Release/chromium.1
	dh_auto_install
	# update launcher script with build information
	sed 's|@BUILD_DIST@|$(shell printf "%s %s/%s" $(shell lsb_release -si) $(shell lsb_release -sc) $(shell lsb_release -sr))|' \
	    < debian/scripts/chromium > debian/ungoogled-chromium/usr/bin/chromium
	# move icons into /usr/share
	./debian/scripts/icons

override_dh_auto_install-indep:
	mv out/Release/locales/en-US.pak out/Release/en-US.pak.indepexclude || true
	dh_auto_install

override_dh_fixperms:
	dh_fixperms --exclude chrome-sandbox

override_dh_auto_clean:
	rm -rf out
	find . -name \*.pyc -execdir rm -f {} \;
	dh_auto_clean

###################### upstream source downloading ############################

url=https://gsdview.appspot.com/chromium-browser-official
version=$(shell dpkg-parsechangelog -S Version | sed s/-.*//)
extract=chromium-$(version)
tarfile=$(extract).tar
tarball=$(tarfile).xz
debvers=../ungoogled-chromium_$(version)
origtxz=$(debvers).orig.tar.xz
cache=../download_cache

get-orig-source:
	test -d $(cache) || mkdir $(cache)
	python3 -B $(ungoogled_chromium_files)/utils/downloads.py retrieve -i $(ungoogled_chromium_files)/downloads.ini -c $(cache)
	test ! -e $(extract) || rm -rf $(extract)
	python3 -B $(ungoogled_chromium_files)/utils/downloads.py unpack -i $(ungoogled_chromium_files)/downloads.ini -c $(cache) $(extract)
	python3 -B $(ungoogled_chromium_files)/utils/prune_binaries.py $(extract) $(ungoogled_chromium_files)/pruning.list
	./debian/scripts/remove_copyright_excluded $(extract)
	cd $(extract) && ../debian/scripts/check-upstream
	test ! -e $(origtxz) || rm -f $(origtxz)
	tar cf - $(extract) | xz -6 -T $(njobs) - > $(origtxz)
	rm -rf $(extract)

###################### misc source setup commands ############################

setup-debian:
	python3 -B $(ungoogled_chromium_files)/utils/patches.py merge -p debian/patches $(ungoogled_chromium_files)/patches
	./debian/scripts/generate_changelog
	sed -i "/^Maintainer:/cMaintainer: $$(cat debian/uploader.txt)" ./debian/control

setup-local-src:
	test -d $(cache) || mkdir $(cache)
	python3 -B $(ungoogled_chromium_files)/utils/downloads.py retrieve -i $(ungoogled_chromium_files)/downloads.ini -c $(cache)
	python3 -B $(ungoogled_chromium_files)/utils/downloads.py unpack -i $(ungoogled_chromium_files)/downloads.ini -c $(cache) ./
	python3 -B $(ungoogled_chromium_files)/utils/prune_binaries.py ./ $(ungoogled_chromium_files)/pruning.list
	./debian/scripts/remove_copyright_excluded
	./debian/scripts/check-upstream
