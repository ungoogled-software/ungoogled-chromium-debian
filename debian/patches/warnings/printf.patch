description: cast enums to int for use as printf arguments
author: Michael Gilbert <mgilbert@debian.org>

--- a/ui/gfx/ipc/buffer_types/gfx_param_traits.cc
+++ b/ui/gfx/ipc/buffer_types/gfx_param_traits.cc
@@ -30,7 +30,7 @@ bool ParamTraits<gfx::BufferUsageAndForm
 void ParamTraits<gfx::BufferUsageAndFormat>::Log(
     const gfx::BufferUsageAndFormat& p,
     std::string* l) {
-  l->append(base::StringPrintf("(%d, %d)", p.usage, p.format));
+  l->append(base::StringPrintf("(%d, %d)", static_cast<int>(p.usage), static_cast<int>(p.format)));
 }
 
 }  // namespace IPC
--- a/content/browser/web_package/signed_exchange_handler.cc
+++ b/content/browser/web_package/signed_exchange_handler.cc
@@ -611,7 +611,7 @@ void SignedExchangeHandler::OnVerifyCert
       error_message = base::StringPrintf(
           "CT verification failed. result: %s, policy compliance: %d",
           net::ErrorToShortString(error_code).c_str(),
-          ct_result.policy_compliance);
+          static_cast<int>(ct_result.policy_compliance));
       result = SignedExchangeLoadResult::kCTVerificationError;
     } else {
       error_message =
--- a/third_party/blink/renderer/modules/cache_storage/inspector_cache_storage_agent.cc
+++ b/third_party/blink/renderer/modules/cache_storage/inspector_cache_storage_agent.cc
@@ -444,7 +444,7 @@ class CachedResponseFileReaderLoaderClie
 
   void DidFail(FileErrorCode error) override {
     callback_->sendFailure(ProtocolResponse::Error(String::Format(
-        "Unable to read the cached response, error code: %d", error)));
+        "Unable to read the cached response, error code: %d", static_cast<int>(error))));
     dispose();
   }
 
--- a/net/proxy_resolution/proxy_resolver_v8_tracing.cc
+++ b/net/proxy_resolution/proxy_resolver_v8_tracing.cc
@@ -836,7 +836,7 @@ void Job::SaveDnsToLocalCache(const std:
 
 std::string Job::MakeDnsCacheKey(const std::string& host,
                                  ProxyResolveDnsOperation op) {
-  return base::StringPrintf("%d:%s", op, host.c_str());
+  return base::StringPrintf("%d:%s", static_cast<int>(op), host.c_str());
 }
 
 void Job::HandleAlertOrError(bool is_alert,
--- a/ui/events/blink/web_input_event_traits.cc
+++ b/ui/events/blink/web_input_event_traits.cc
@@ -63,7 +63,8 @@ void ApppendEventDetails(const WebGestur
                 " RawData: (%f, %f, %f, %f)\n}",
                 event.PositionInWidget().x, event.PositionInWidget().y,
                 event.PositionInScreen().x, event.PositionInScreen().y,
-                event.SourceDevice(), event.data.scroll_update.delta_x,
+                static_cast<int>(event.SourceDevice()),
+                event.data.scroll_update.delta_x,
                 event.data.scroll_update.delta_y,
                 event.data.scroll_update.velocity_x,
                 event.data.scroll_update.velocity_y);
--- a/chrome/test/chromedriver/chrome_launcher.cc
+++ b/chrome/test/chromedriver/chrome_launcher.cc
@@ -827,7 +827,7 @@ Status ProcessExtension(const std::strin
                          {} /** required_file_hash */, &public_key_base64, &id);
     if (result != crx_file::VerifierResult::OK_FULL) {
       return Status(kUnknownError,
-                    base::StringPrintf("CRX verification failed: %d", result));
+                    base::StringPrintf("CRX verification failed: %d", static_cast<int>(result)));
     }
   } else {
     // Not a CRX file. Generate RSA keypair to get a valid extension id.
