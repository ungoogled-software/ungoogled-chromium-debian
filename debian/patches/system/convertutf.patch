description: use icu for UTF8 conversions (eliminates ConvertUTF embedded code copy)
bug-debian: http://bugs.debian.org/900596
author: Michael Gilbert <mgilbert@debian.org>

--- a/third_party/breakpad/breakpad/src/common/string_conversion.cc
+++ b/third_party/breakpad/breakpad/src/common/string_conversion.cc
@@ -29,7 +29,7 @@
 
 #include <string.h>
 
-#include "common/convert_UTF.h"
+#include <unicode/ustring.h>
 #include "common/scoped_ptr.h"
 #include "common/string_conversion.h"
 #include "common/using_std_string.h"
@@ -38,78 +38,21 @@ namespace google_breakpad {
 
 using std::vector;
 
-void UTF8ToUTF16(const char *in, vector<uint16_t> *out) {
-  size_t source_length = strlen(in);
-  const UTF8 *source_ptr = reinterpret_cast<const UTF8 *>(in);
-  const UTF8 *source_end_ptr = source_ptr + source_length;
-  // Erase the contents and zero fill to the expected size
-  out->clear();
-  out->insert(out->begin(), source_length, 0);
-  uint16_t *target_ptr = &(*out)[0];
-  uint16_t *target_end_ptr = target_ptr + out->capacity();
-  ConversionResult result = ConvertUTF8toUTF16(&source_ptr, source_end_ptr,
-                                               &target_ptr, target_end_ptr,
-                                               strictConversion);
-
-  // Resize to be the size of the # of converted characters + NULL
-  out->resize(result == conversionOK ? target_ptr - &(*out)[0] + 1: 0);
-}
-
-int UTF8ToUTF16Char(const char *in, int in_length, uint16_t out[2]) {
-  const UTF8 *source_ptr = reinterpret_cast<const UTF8 *>(in);
-  const UTF8 *source_end_ptr = source_ptr + 1;
-  uint16_t *target_ptr = out;
-  uint16_t *target_end_ptr = target_ptr + 2;
-  out[0] = out[1] = 0;
-
-  // Process one character at a time
-  while (1) {
-    ConversionResult result = ConvertUTF8toUTF16(&source_ptr, source_end_ptr,
-                                                 &target_ptr, target_end_ptr,
-                                                 strictConversion);
-
-    if (result == conversionOK)
-      return static_cast<int>(source_ptr - reinterpret_cast<const UTF8 *>(in));
-
-    // Add another character to the input stream and try again
-    source_ptr = reinterpret_cast<const UTF8 *>(in);
-    ++source_end_ptr;
-
-    if (source_end_ptr > reinterpret_cast<const UTF8 *>(in) + in_length)
-      break;
+int UTF8ToUTF16Char(const char *in, int in_length, UChar out[2]) {
+  int dest_length = 0;
+  UErrorCode result = U_ZERO_ERROR;
+  u_strFromUTF8(out, 2, &dest_length, in, in_length, &result);
+  if (U_FAILURE(result)) {
+    out[0] = out[1] = 0;
   }
-
-  return 0;
-}
-
-void UTF32ToUTF16(const wchar_t *in, vector<uint16_t> *out) {
-  size_t source_length = wcslen(in);
-  const UTF32 *source_ptr = reinterpret_cast<const UTF32 *>(in);
-  const UTF32 *source_end_ptr = source_ptr + source_length;
-  // Erase the contents and zero fill to the expected size
-  out->clear();
-  out->insert(out->begin(), source_length, 0);
-  uint16_t *target_ptr = &(*out)[0];
-  uint16_t *target_end_ptr = target_ptr + out->capacity();
-  ConversionResult result = ConvertUTF32toUTF16(&source_ptr, source_end_ptr,
-                                                &target_ptr, target_end_ptr,
-                                                strictConversion);
-
-  // Resize to be the size of the # of converted characters + NULL
-  out->resize(result == conversionOK ? target_ptr - &(*out)[0] + 1: 0);
+  return dest_length;
 }
 
-void UTF32ToUTF16Char(wchar_t in, uint16_t out[2]) {
-  const UTF32 *source_ptr = reinterpret_cast<const UTF32 *>(&in);
-  const UTF32 *source_end_ptr = source_ptr + 1;
-  uint16_t *target_ptr = out;
-  uint16_t *target_end_ptr = target_ptr + 2;
-  out[0] = out[1] = 0;
-  ConversionResult result = ConvertUTF32toUTF16(&source_ptr, source_end_ptr,
-                                                &target_ptr, target_end_ptr,
-                                                strictConversion);
-
-  if (result != conversionOK) {
+void UTF32ToUTF16Char(wchar_t in, UChar out[2]) {
+  int32_t dest_length = 0;
+  UErrorCode result = U_ZERO_ERROR;
+  u_strFromWCS(out, 2, &dest_length, &in, 1, &result);
+  if (U_FAILURE(result)) {
     out[0] = out[1] = 0;
   }
 }
@@ -118,38 +61,4 @@ static inline uint16_t Swap(uint16_t val
   return (value >> 8) | static_cast<uint16_t>(value << 8);
 }
 
-string UTF16ToUTF8(const vector<uint16_t> &in, bool swap) {
-  const UTF16 *source_ptr = &in[0];
-  scoped_array<uint16_t> source_buffer;
-
-  // If we're to swap, we need to make a local copy and swap each byte pair
-  if (swap) {
-    int idx = 0;
-    source_buffer.reset(new uint16_t[in.size()]);
-    UTF16 *source_buffer_ptr = source_buffer.get();
-    for (vector<uint16_t>::const_iterator it = in.begin();
-         it != in.end(); ++it, ++idx)
-      source_buffer_ptr[idx] = Swap(*it);
-
-    source_ptr = source_buffer.get();
-  }
-
-  // The maximum expansion would be 4x the size of the input string.
-  const UTF16 *source_end_ptr = source_ptr + in.size();
-  size_t target_capacity = in.size() * 4;
-  scoped_array<UTF8> target_buffer(new UTF8[target_capacity]);
-  UTF8 *target_ptr = target_buffer.get();
-  UTF8 *target_end_ptr = target_ptr + target_capacity;
-  ConversionResult result = ConvertUTF16toUTF8(&source_ptr, source_end_ptr,
-                                               &target_ptr, target_end_ptr,
-                                               strictConversion);
-
-  if (result == conversionOK) {
-    const char *targetPtr = reinterpret_cast<const char *>(target_buffer.get());
-    return targetPtr;
-  }
-
-  return "";
-}
-
 }  // namespace google_breakpad
--- a/third_party/breakpad/breakpad/src/common/string_conversion.h
+++ b/third_party/breakpad/breakpad/src/common/string_conversion.h
@@ -35,6 +35,7 @@
 #include <string>
 #include <vector>
 
+#include <unicode/umachine.h>
 #include "common/using_std_string.h"
 #include "google_breakpad/common/breakpad_types.h"
 
@@ -42,26 +43,15 @@ namespace google_breakpad {
   
 using std::vector;
 
-// Convert |in| to UTF-16 into |out|.  Use platform byte ordering.  If the
-// conversion failed, |out| will be zero length.
-void UTF8ToUTF16(const char *in, vector<uint16_t> *out);
-
 // Convert at least one character (up to a maximum of |in_length|) from |in|
 // to UTF-16 into |out|.  Return the number of characters consumed from |in|.
 // Any unused characters in |out| will be initialized to 0.  No memory will
 // be allocated by this routine.
-int UTF8ToUTF16Char(const char *in, int in_length, uint16_t out[2]);
-
-// Convert |in| to UTF-16 into |out|.  Use platform byte ordering.  If the
-// conversion failed, |out| will be zero length.
-void UTF32ToUTF16(const wchar_t *in, vector<uint16_t> *out);
+int UTF8ToUTF16Char(const char *in, int in_length, UChar out[2]);
 
 // Convert |in| to UTF-16 into |out|.  Any unused characters in |out| will be
 // initialized to 0.  No memory will be allocated by this routine.
-void UTF32ToUTF16Char(wchar_t in, uint16_t out[2]);
-
-// Convert |in| to UTF-8.  If |swap| is true, swap bytes before converting.
-string UTF16ToUTF8(const vector<uint16_t> &in, bool swap);
+void UTF32ToUTF16Char(wchar_t in, UChar out[2]);
 
 }  // namespace google_breakpad
 
--- a/third_party/breakpad/BUILD.gn
+++ b/third_party/breakpad/BUILD.gn
@@ -581,8 +581,6 @@ if (is_linux || is_android) {
       "breakpad/src/client/linux/handler/exception_handler.h",
       "breakpad/src/client/linux/handler/minidump_descriptor.cc",
       "breakpad/src/client/linux/handler/minidump_descriptor.h",
-      "breakpad/src/client/linux/log/log.cc",
-      "breakpad/src/client/linux/log/log.h",
       "breakpad/src/client/linux/microdump_writer/microdump_writer.cc",
       "breakpad/src/client/linux/microdump_writer/microdump_writer.h",
       "breakpad/src/client/linux/minidump_writer/cpu_set.h",
@@ -600,8 +598,6 @@ if (is_linux || is_android) {
       "breakpad/src/client/minidump_file_writer-inl.h",
       "breakpad/src/client/minidump_file_writer.cc",
       "breakpad/src/client/minidump_file_writer.h",
-      "breakpad/src/common/convert_UTF.cc",
-      "breakpad/src/common/convert_UTF.h",
       "breakpad/src/common/linux/elf_core_dump.cc",
       "breakpad/src/common/linux/elf_core_dump.h",
       "breakpad/src/common/linux/elfutils.cc",
--- a/third_party/breakpad/breakpad/src/client/minidump_file_writer.cc
+++ b/third_party/breakpad/breakpad/src/client/minidump_file_writer.cc
@@ -149,11 +149,11 @@ bool MinidumpFileWriter::CopyStringToMDS
                                               unsigned int length,
                                               TypedMDRVA<MDString> *mdstring) {
   bool result = true;
-  if (sizeof(wchar_t) == sizeof(uint16_t)) {
+  if (sizeof(wchar_t) == sizeof(UChar)) {
     // Shortcut if wchar_t is the same size as MDString's buffer
     result = mdstring->Copy(str, mdstring->get()->length);
   } else {
-    uint16_t out[2];
+    UChar out[2];
     int out_idx = 0;
 
     // Copy the string character by character
@@ -170,7 +170,7 @@ bool MinidumpFileWriter::CopyStringToMDS
       // zero, but the second one may be zero, depending on the conversion from
       // UTF-32.
       int out_count = out[1] ? 2 : 1;
-      size_t out_size = sizeof(uint16_t) * out_count;
+      size_t out_size = sizeof(UChar) * out_count;
       result = mdstring->CopyIndexAfterObject(out_idx, out, out_size);
       out_idx += out_count;
     }
@@ -182,7 +182,7 @@ bool MinidumpFileWriter::CopyStringToMDS
                                               unsigned int length,
                                               TypedMDRVA<MDString> *mdstring) {
   bool result = true;
-  uint16_t out[2];
+  UChar out[2];
   int out_idx = 0;
 
   // Copy the string character by character
@@ -197,7 +197,7 @@ bool MinidumpFileWriter::CopyStringToMDS
 
     // Append the one or two UTF-16 characters
     int out_count = out[1] ? 2 : 1;
-    size_t out_size = sizeof(uint16_t) * out_count;
+    size_t out_size = sizeof(UChar) * out_count;
     result = mdstring->CopyIndexAfterObject(out_idx, out, out_size);
     out_idx += out_count;
   }
