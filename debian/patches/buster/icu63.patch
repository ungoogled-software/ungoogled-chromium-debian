description: maintain compatibility with icu 6.3
author: Michael Gilbert <mgilbert@debian.org>

--- a/v8/src/objects/intl-objects.h
+++ b/v8/src/objects/intl-objects.h
@@ -19,8 +19,9 @@
 #include "src/objects/objects.h"
 #include "unicode/locid.h"
 #include "unicode/uversion.h"
+#include "unicode/dtitvfmt.h"
 
-#define V8_MINIMUM_ICU_VERSION 64
+#define V8_MINIMUM_ICU_VERSION 63
 
 namespace U_ICU_NAMESPACE {
 class BreakIterator;
@@ -200,8 +201,8 @@ class Intl {
       int32_t end);
 
   // Helper function to convert a FormattedValue to String
-  V8_WARN_UNUSED_RESULT static MaybeHandle<String> FormattedToString(
-      Isolate* isolate, const icu::FormattedValue& formatted);
+  V8_WARN_UNUSED_RESULT static MaybeHandle<String> FormattedDateIntervalToString(
+      Isolate* isolate, const icu::DateInterval& interval, const icu::DateIntervalFormat& format);
 
   // Helper function to convert number field id to type string.
   static Handle<String> NumberFieldToType(Isolate* isolate,
--- a/v8/src/objects/js-list-format.cc
+++ b/v8/src/objects/js-list-format.cc
@@ -292,7 +292,7 @@ Maybe<std::vector<icu::UnicodeString>> T
 template <typename T>
 MaybeHandle<T> FormatListCommon(
     Isolate* isolate, Handle<JSListFormat> format, Handle<JSArray> list,
-    MaybeHandle<T> (*formatToResult)(Isolate*, const icu::FormattedValue&)) {
+    MaybeHandle<T> (*formatToResult)(Isolate*, const icu::UnicodeString&, const std::vector<icu::UnicodeString>&)) {
   DCHECK(!list->IsUndefined());
   // ecma402 #sec-createpartsfromlist
   // 2. If list contains any element value such that Type(value) is not String,
@@ -306,49 +306,67 @@ MaybeHandle<T> FormatListCommon(
   CHECK_NOT_NULL(formatter);
 
   UErrorCode status = U_ZERO_ERROR;
-  icu::FormattedList formatted = formatter->formatStringsToValue(
-      array.data(), static_cast<int32_t>(array.size()), status);
+  icu::UnicodeString formatted;
+  formatter->format(array.data(), static_cast<int32_t>(array.size()), formatted,
+                    status);
   if (U_FAILURE(status)) {
     THROW_NEW_ERROR(isolate, NewTypeError(MessageTemplate::kIcuError), T);
   }
-  return formatToResult(isolate, formatted);
+  return formatToResult(isolate, formatted, array);
 }
 
-Handle<String> IcuFieldIdToType(Isolate* isolate, int32_t field_id) {
-  switch (field_id) {
-    case ULISTFMT_LITERAL_FIELD:
-      return isolate->factory()->literal_string();
-    case ULISTFMT_ELEMENT_FIELD:
-      return isolate->factory()->element_string();
-    default:
-      UNREACHABLE();
-      // To prevent MSVC from issuing C4715 warning.
-      return Handle<String>();
-  }
+MaybeHandle<String> FormattedListToString(
+    Isolate* isolate, const icu::UnicodeString& formatted, const std::vector<icu::UnicodeString>& items) {
+    return Intl::ToString(isolate, formatted);
 }
 
 // A helper function to convert the FormattedList to a
 // MaybeHandle<JSArray> for the implementation of formatToParts.
 MaybeHandle<JSArray> FormattedListToJSArray(
-    Isolate* isolate, const icu::FormattedValue& formatted) {
-  Handle<JSArray> array = isolate->factory()->NewJSArray(0);
-  icu::ConstrainedFieldPosition cfpos;
-  cfpos.constrainCategory(UFIELD_CATEGORY_LIST);
+    Isolate* isolate, const icu::UnicodeString& formatted, const std::vector<icu::UnicodeString>& items) {
+// From chromium 70
+// This is a temporary workaround until icu::ListFormat support FieldPosition
+// It is inefficient and won't work correctly on the edge case that the input
+// contains fraction of the list pattern.
+// For example the following under English will mark the "an" incorrectly
+// since the formatted is "a, b, and an".
+// listFormat.formatToParts(["a", "b", "an"])
+// https://ssl.icu-project.org/trac/ticket/13754
+  Factory* factory = isolate->factory();
+  int length = items.size();
+  int estimate_size = length * 2 + 1;
+  Handle<JSArray> array = factory->NewJSArray(estimate_size);
   int index = 0;
-  UErrorCode status = U_ZERO_ERROR;
-  icu::UnicodeString string = formatted.toString(status);
-  Handle<String> substring;
-  while (formatted.nextPosition(cfpos, status) && U_SUCCESS(status)) {
+  int last_pos = 0;
+  for (int i = 0; i < length; i++) {
+    int found = formatted.indexOf(items[i], last_pos);
+    DCHECK_GE(found, 0);
+    if (found > last_pos) {
+      Handle<String> substring;
+      ASSIGN_RETURN_ON_EXCEPTION(
+          isolate, substring,
+          Intl::ToString(isolate, formatted, last_pos, found), JSArray);
+      Intl::AddElement(isolate, array, index++, factory->literal_string(),
+                       substring);
+    }
+    last_pos = found + items[i].length();
+    Handle<String> substring;
     ASSIGN_RETURN_ON_EXCEPTION(
-        isolate, substring,
-        Intl::ToString(isolate, string, cfpos.getStart(), cfpos.getLimit()),
+        isolate, substring, Intl::ToString(isolate, formatted, found, last_pos),
         JSArray);
-    Intl::AddElement(isolate, array, index++,
-                     IcuFieldIdToType(isolate, cfpos.getField()), substring);
+    Intl::AddElement(isolate, array, index++, factory->element_string(),
+                     substring);
   }
-  if (U_FAILURE(status)) {
-    THROW_NEW_ERROR(isolate, NewTypeError(MessageTemplate::kIcuError), JSArray);
+  if (last_pos < formatted.length()) {
+    Handle<String> substring;
+    ASSIGN_RETURN_ON_EXCEPTION(
+        isolate, substring,
+        Intl::ToString(isolate, formatted, last_pos, formatted.length()),
+        JSArray);
+    Intl::AddElement(isolate, array, index++, factory->literal_string(),
+                     substring);
   }
+
   JSObject::ValidateElements(*array);
   return array;
 }
@@ -360,7 +378,7 @@ MaybeHandle<String> JSListFormat::Format
                                              Handle<JSListFormat> format,
                                              Handle<JSArray> list) {
   return FormatListCommon<String>(isolate, format, list,
-                                  Intl::FormattedToString);
+                                  FormattedListToString);
 }
 
 // ecma42 #sec-formatlisttoparts
--- a/v8/src/objects/js-relative-time-format.cc
+++ b/v8/src/objects/js-relative-time-format.cc
@@ -235,6 +235,65 @@ Handle<String> JSRelativeTimeFormat::Num
 
 namespace {
 
+// From chromium 74
+MaybeHandle<JSArray> GenerateRelativeTimeFormatParts(
+    Isolate* isolate, const icu::UnicodeString& formatted,
+    const icu::UnicodeString& integer_part, const Handle<String>& unit,
+    double number, const icu::number::LocalizedNumberFormatter& nf) {
+  Factory* factory = isolate->factory();
+  Handle<JSArray> array = factory->NewJSArray(0);
+  int32_t found = formatted.indexOf(integer_part);
+
+  Handle<String> substring;
+  if (found < 0) {
+    // Cannot find the integer_part in the formatted.
+    // Return [{'type': 'literal', 'value': formatted}]
+    ASSIGN_RETURN_ON_EXCEPTION(isolate, substring,
+                               Intl::ToString(isolate, formatted), JSArray);
+    Intl::AddElement(isolate, array,
+                     0,                          // index
+                     factory->literal_string(),  // field_type_string
+                     substring);
+  } else {
+    // Found the formatted integer in the result.
+    int index = 0;
+
+    // array.push({
+    //     'type': 'literal',
+    //     'value': formatted.substring(0, found)})
+    if (found > 0) {
+      ASSIGN_RETURN_ON_EXCEPTION(isolate, substring,
+                                 Intl::ToString(isolate, formatted, 0, found),
+                                 JSArray);
+      Intl::AddElement(isolate, array, index++,
+                       factory->literal_string(),  // field_type_string
+                       substring);
+    }
+
+    Handle<Object> number_obj = factory->NewNumber(number);
+    Maybe<int> maybe_format_to_parts = JSNumberFormat::FormatToParts(
+        isolate, array, index, nf, number_obj, unit);
+    MAYBE_RETURN(maybe_format_to_parts, Handle<JSArray>());
+    index = maybe_format_to_parts.FromJust();
+
+    // array.push({
+    //     'type': 'literal',
+    //     'value': formatted.substring(
+    //         found + integer_part.length, formatted.length)})
+    if (found + integer_part.length() < formatted.length()) {
+      ASSIGN_RETURN_ON_EXCEPTION(
+          isolate, substring,
+          Intl::ToString(isolate, formatted, found + integer_part.length(),
+                         formatted.length()),
+          JSArray);
+      Intl::AddElement(isolate, array, index,
+                       factory->literal_string(),  // field_type_string
+                       substring);
+    }
+  }
+  return array;
+}
+
 Handle<String> UnitAsString(Isolate* isolate, URelativeDateTimeUnit unit_enum) {
   Factory* factory = isolate->factory();
   switch (unit_enum) {
@@ -297,7 +356,8 @@ MaybeHandle<T> FormatCommon(
     Isolate* isolate, Handle<JSRelativeTimeFormat> format,
     Handle<Object> value_obj, Handle<Object> unit_obj, const char* func_name,
     MaybeHandle<T> (*formatToResult)(Isolate*,
-                                     const icu::FormattedRelativeDateTime&,
+                                     const icu::UnicodeString&,
+                                     const icu::number::LocalizedNumberFormatter&,
                                      Handle<Object>, Handle<String>)) {
   // 3. Let value be ? ToNumber(value).
   Handle<Object> value;
@@ -327,26 +387,32 @@ MaybeHandle<T> FormatCommon(
                       unit),
         T);
   }
+
   UErrorCode status = U_ZERO_ERROR;
-  icu::FormattedRelativeDateTime formatted =
-      (format->numeric() == JSRelativeTimeFormat::Numeric::ALWAYS)
-          ? formatter->formatNumericToValue(number, unit_enum, status)
-          : formatter->formatToValue(number, unit_enum, status);
+  icu::UnicodeString formatted;
+
+  if (format->numeric() == JSRelativeTimeFormat::Numeric::ALWAYS) {
+    formatter->formatNumeric(number, unit_enum, formatted, status);
+  } else {
+    DCHECK_EQ(JSRelativeTimeFormat::Numeric::AUTO, format->numeric());
+    formatter->format(number, unit_enum, formatted, status);
+  }
+
   if (U_FAILURE(status)) {
     THROW_NEW_ERROR(isolate, NewTypeError(MessageTemplate::kIcuError), T);
   }
-  return formatToResult(isolate, formatted, value,
-                        UnitAsString(isolate, unit_enum));
+
+  std::string locale_str(format->locale().ToCString().get());
+  icu::Locale icu_locale = Intl::CreateICULocale(locale_str);
+  return formatToResult(isolate, formatted,
+                        icu::number::NumberFormatter::withLocale(icu_locale),
+                        value, UnitAsString(isolate, unit_enum));
 }
 
 MaybeHandle<String> FormatToString(
-    Isolate* isolate, const icu::FormattedRelativeDateTime& formatted,
+    Isolate* isolate, const icu::UnicodeString& result,
+    const icu::number::LocalizedNumberFormatter& nf,
     Handle<Object> value, Handle<String> unit) {
-  UErrorCode status = U_ZERO_ERROR;
-  icu::UnicodeString result = formatted.toString(status);
-  if (U_FAILURE(status)) {
-    THROW_NEW_ERROR(isolate, NewTypeError(MessageTemplate::kIcuError), String);
-  }
   return Intl::ToString(isolate, result);
 }
 
@@ -377,67 +443,32 @@ Maybe<bool> AddUnit(Isolate* isolate, Ha
 }
 
 MaybeHandle<JSArray> FormatToJSArray(
-    Isolate* isolate, const icu::FormattedRelativeDateTime& formatted,
+    Isolate* isolate, const icu::UnicodeString& formatted,
+    const icu::number::LocalizedNumberFormatter& nf,
     Handle<Object> value, Handle<String> unit) {
   UErrorCode status = U_ZERO_ERROR;
-  icu::UnicodeString string = formatted.toString(status);
-
-  Factory* factory = isolate->factory();
-  Handle<JSArray> array = factory->NewJSArray(0);
-  icu::ConstrainedFieldPosition cfpos;
-  cfpos.constrainCategory(UFIELD_CATEGORY_NUMBER);
-  int32_t index = 0;
-
-  int32_t previous_end = 0;
-  Handle<String> substring;
-  std::vector<std::pair<int32_t, int32_t>> groups;
-  while (formatted.nextPosition(cfpos, status) && U_SUCCESS(status)) {
-    int32_t category = cfpos.getCategory();
-    int32_t field = cfpos.getField();
-    int32_t start = cfpos.getStart();
-    int32_t limit = cfpos.getLimit();
-    if (category == UFIELD_CATEGORY_NUMBER) {
-      if (field == UNUM_GROUPING_SEPARATOR_FIELD) {
-        groups.push_back(std::pair<int32_t, int32_t>(start, limit));
-        continue;
-      }
-      if (start > previous_end) {
-        Maybe<bool> maybe_added =
-            AddLiteral(isolate, array, string, index++, previous_end, start);
-        MAYBE_RETURN(maybe_added, Handle<JSArray>());
-      }
-      if (field == UNUM_INTEGER_FIELD) {
-        for (auto start_limit : groups) {
-          if (start_limit.first > start) {
-            Maybe<bool> maybe_added =
-                AddUnit(isolate, array, string, index++, start,
-                        start_limit.first, field, value, unit);
-            MAYBE_RETURN(maybe_added, Handle<JSArray>());
-            maybe_added = AddUnit(isolate, array, string, index++,
-                                  start_limit.first, start_limit.second,
-                                  UNUM_GROUPING_SEPARATOR_FIELD, value, unit);
-            MAYBE_RETURN(maybe_added, Handle<JSArray>());
-            start = start_limit.second;
-          }
-        }
-      }
-      Maybe<bool> maybe_added = AddUnit(isolate, array, string, index++, start,
-                                        limit, field, value, unit);
-      MAYBE_RETURN(maybe_added, Handle<JSArray>());
-      previous_end = limit;
-    }
-  }
+  double number = value->Number();
+  double abs_number = std::abs(number);
+  icu::number::FormattedNumber formatted_number
+      = nf.formatDouble(abs_number, status);
   if (U_FAILURE(status)) {
-    THROW_NEW_ERROR(isolate, NewTypeError(MessageTemplate::kIcuError), JSArray);
+    THROW_NEW_ERROR(isolate, NewTypeError(MessageTemplate::kIcuError),
+                    JSArray);
   }
-  if (string.length() > previous_end) {
-    Maybe<bool> maybe_added = AddLiteral(isolate, array, string, index,
-                                         previous_end, string.length());
-    MAYBE_RETURN(maybe_added, Handle<JSArray>());
+
+  icu::UnicodeString number_str = formatted_number.toString(status);
+  if (U_FAILURE(status)) {
+    THROW_NEW_ERROR(isolate, NewTypeError(MessageTemplate::kIcuError),
+                    JSArray);
   }
 
-  JSObject::ValidateElements(*array);
-  return array;
+  Handle<JSArray> elements;
+  ASSIGN_RETURN_ON_EXCEPTION(isolate, elements,
+                             GenerateRelativeTimeFormatParts(
+                                 isolate, formatted, number_str, unit,
+                                 abs_number, nf),
+                             JSArray);
+  return elements;
 }
 
 }  // namespace
--- a/v8/src/objects/intl-objects.cc
+++ b/v8/src/objects/intl-objects.cc
@@ -31,7 +31,6 @@
 #include "unicode/coll.h"
 #include "unicode/datefmt.h"
 #include "unicode/decimfmt.h"
-#include "unicode/formattedvalue.h"
 #include "unicode/locid.h"
 #include "unicode/normalizer2.h"
 #include "unicode/numberformatter.h"
@@ -1691,8 +1690,7 @@ std::map<std::string, std::string> Looku
       }
     }
     status = U_ZERO_ERROR;
-    icu_locale->setUnicodeKeywordValue(
-        bcp47_key == nullptr ? keyword : bcp47_key, nullptr, status);
+    icu_locale->setKeywordValue(keyword, nullptr, status);
     CHECK(U_SUCCESS(status));
   }
 
@@ -2098,11 +2096,6 @@ Handle<String> Intl::NumberFieldToType(I
       UNREACHABLE();
       return Handle<String>();
 
-    case UNUM_COMPACT_FIELD:
-      return isolate->factory()->compact_string();
-    case UNUM_MEASURE_UNIT_FIELD:
-      return isolate->factory()->unit_string();
-
     default:
       UNREACHABLE();
       return Handle<String>();
@@ -2110,10 +2103,13 @@ Handle<String> Intl::NumberFieldToType(I
 }
 
 // A helper function to convert the FormattedValue for several Intl objects.
-MaybeHandle<String> Intl::FormattedToString(
-    Isolate* isolate, const icu::FormattedValue& formatted) {
+MaybeHandle<String> Intl::FormattedDateIntervalToString(
+    Isolate* isolate, const icu::DateInterval& interval, const icu::DateIntervalFormat& format) {
+  icu::UnicodeString result;
+  icu::FieldPosition fpos;
+
   UErrorCode status = U_ZERO_ERROR;
-  icu::UnicodeString result = formatted.toString(status);
+  format.format(&interval, result, fpos, status);
   if (U_FAILURE(status)) {
     THROW_NEW_ERROR(isolate, NewTypeError(MessageTemplate::kIcuError), String);
   }
--- a/v8/src/objects/js-locale.cc
+++ b/v8/src/objects/js-locale.cc
@@ -21,7 +21,6 @@
 #include "src/objects/js-locale-inl.h"
 #include "src/objects/objects-inl.h"
 #include "unicode/char16ptr.h"
-#include "unicode/localebuilder.h"
 #include "unicode/locid.h"
 #include "unicode/uloc.h"
 #include "unicode/unistr.h"
@@ -41,7 +40,7 @@ struct OptionData {
 // Inserts tags from options into locale string.
 Maybe<bool> InsertOptionsIntoLocale(Isolate* isolate,
                                     Handle<JSReceiver> options,
-                                    icu::LocaleBuilder* builder) {
+                                    icu::Locale* icu_locale) {
   CHECK(isolate);
 
   const std::vector<const char*> hour_cycle_values = {"h11", "h12", "h23",
@@ -60,6 +59,7 @@ Maybe<bool> InsertOptionsIntoLocale(Isol
   // TODO(cira): Pass in values as per the spec to make this to be
   // spec compliant.
 
+  UErrorCode status = U_ZERO_ERROR;
   for (const auto& option_to_bcp47 : kOptionToUnicodeTagMap) {
     std::unique_ptr<char[]> value_str = nullptr;
     bool value_bool = false;
@@ -84,10 +84,16 @@ Maybe<bool> InsertOptionsIntoLocale(Isol
 
     // Overwrite existing, or insert new key-value to the locale string.
     if (!uloc_toLegacyType(uloc_toLegacyKey(option_to_bcp47.key),
-                           value_str.get())) {
+                          value_str.get())) {
       return Just(false);
+    } else {
+      // Only call setUnicodeKeywordValue if that value is a valid one.
+      icu_locale->setUnicodeKeywordValue(option_to_bcp47.key, value_str.get(),
+                                         status);
+      if (U_FAILURE(status)) {
+        return Just(false);
+      }
     }
-    builder->setUnicodeLocaleKeyword(option_to_bcp47.key, value_str.get());
   }
   return Just(true);
 }
@@ -208,8 +214,7 @@ bool StartsWithUnicodeLanguageId(const s
 }
 
 Maybe<bool> ApplyOptionsToTag(Isolate* isolate, Handle<String> tag,
-                              Handle<JSReceiver> options,
-                              icu::LocaleBuilder* builder) {
+                              Handle<JSReceiver> options) {
   v8::Isolate* v8_isolate = reinterpret_cast<v8::Isolate*>(isolate);
   if (tag->length() == 0) {
     THROW_NEW_ERROR_RETURN_VALUE(
@@ -218,7 +223,6 @@ Maybe<bool> ApplyOptionsToTag(Isolate* i
   }
 
   v8::String::Utf8Value bcp47_tag(v8_isolate, v8::Utils::ToLocal(tag));
-  builder->setLanguageTag({*bcp47_tag, bcp47_tag.length()});
   CHECK_LT(0, bcp47_tag.length());
   CHECK_NOT_NULL(*bcp47_tag);
   // 2. If IsStructurallyValidLanguageTag(tag) is false, throw a RangeError
@@ -227,7 +231,8 @@ Maybe<bool> ApplyOptionsToTag(Isolate* i
     return Just(false);
   }
   UErrorCode status = U_ZERO_ERROR;
-  builder->build(status);
+  icu::Locale icu_locale =
+      icu::Locale::forLanguageTag({*bcp47_tag, bcp47_tag.length()}, status);
   if (U_FAILURE(status)) {
     return Just(false);
   }
@@ -242,11 +247,9 @@ Maybe<bool> ApplyOptionsToTag(Isolate* i
   MAYBE_RETURN(maybe_language, Nothing<bool>());
   // 4. If language is not undefined, then
   if (maybe_language.FromJust()) {
-    builder->setLanguage(language_str.get());
-    builder->build(status);
     // a. If language does not match the unicode_language_subtag production,
     //    throw a RangeError exception.
-    if (U_FAILURE(status) || language_str[0] == '\0' ||
+    if (!IsUnicodeLanguageSubtag(language_str.get()) || language_str[0] == '\0' ||
         IsAlpha(language_str.get(), 4, 4)) {
       return Just(false);
     }
@@ -260,11 +263,9 @@ Maybe<bool> ApplyOptionsToTag(Isolate* i
   MAYBE_RETURN(maybe_script, Nothing<bool>());
   // 6. If script is not undefined, then
   if (maybe_script.FromJust()) {
-    builder->setScript(script_str.get());
-    builder->build(status);
     // a. If script does not match the unicode_script_subtag production, throw
     //    a RangeError exception.
-    if (U_FAILURE(status) || script_str[0] == '\0') {
+    if (!IsUnicodeScriptSubtag(script_str.get()) || script_str[0] == '\0') {
       return Just(false);
     }
   }
@@ -279,9 +280,7 @@ Maybe<bool> ApplyOptionsToTag(Isolate* i
   if (maybe_region.FromJust()) {
     // a. If region does not match the region production, throw a RangeError
     // exception.
-    builder->setRegion(region_str.get());
-    builder->build(status);
-    if (U_FAILURE(status) || region_str[0] == '\0') {
+    if (!IsUnicodeRegionSubtag(region_str.get()) || region_str[0] == '\0') {
       return Just(false);
     }
   }
@@ -316,9 +315,8 @@ Maybe<bool> ApplyOptionsToTag(Isolate* i
 MaybeHandle<JSLocale> JSLocale::New(Isolate* isolate, Handle<Map> map,
                                     Handle<String> locale_str,
                                     Handle<JSReceiver> options) {
-  icu::LocaleBuilder builder;
   Maybe<bool> maybe_apply =
-      ApplyOptionsToTag(isolate, locale_str, options, &builder);
+      ApplyOptionsToTag(isolate, locale_str, options);
   MAYBE_RETURN(maybe_apply, MaybeHandle<JSLocale>());
   if (!maybe_apply.FromJust()) {
     THROW_NEW_ERROR(isolate,
@@ -326,12 +324,22 @@ MaybeHandle<JSLocale> JSLocale::New(Isol
                     JSLocale);
   }
 
+  Maybe<std::string> maybe_locale =
+      Intl::CanonicalizeLanguageTag(isolate, locale_str);
+  MAYBE_RETURN(maybe_locale, MaybeHandle<JSLocale>());
+  UErrorCode status = U_ZERO_ERROR;
+  icu::Locale icu_locale =
+      icu::Locale::forLanguageTag(maybe_locale.FromJust().c_str(), status);
+  if (U_FAILURE(status)) {
+    THROW_NEW_ERROR(isolate,
+                    NewRangeError(MessageTemplate::kLocaleBadParameters),
+                    JSLocale);
+  }
+
   Maybe<bool> maybe_insert =
-      InsertOptionsIntoLocale(isolate, options, &builder);
+      InsertOptionsIntoLocale(isolate, options, &icu_locale);
   MAYBE_RETURN(maybe_insert, MaybeHandle<JSLocale>());
-  UErrorCode status = U_ZERO_ERROR;
-  icu::Locale icu_locale = builder.build(status);
-  if (!maybe_insert.FromJust() || U_FAILURE(status)) {
+  if (!maybe_insert.FromJust()) {
     THROW_NEW_ERROR(isolate,
                     NewRangeError(MessageTemplate::kLocaleBadParameters),
                     JSLocale);
--- a/v8/src/objects/js-date-time-format.cc
+++ b/v8/src/objects/js-date-time-format.cc
@@ -1777,55 +1777,12 @@ Maybe<bool> AddPartForFormatRange(Isolat
 // A helper function to convert the FormattedDateInterval to a
 // MaybeHandle<JSArray> for the implementation of formatRangeToParts.
 MaybeHandle<JSArray> FormattedDateIntervalToJSArray(
-    Isolate* isolate, const icu::FormattedValue& formatted) {
-  UErrorCode status = U_ZERO_ERROR;
-  icu::UnicodeString result = formatted.toString(status);
-
+    Isolate* isolate, const icu::DateInterval& interval, const icu::DateIntervalFormat& format) {
   Factory* factory = isolate->factory();
   Handle<JSArray> array = factory->NewJSArray(0);
-  icu::ConstrainedFieldPosition cfpos;
-  int index = 0;
-  int32_t previous_end_pos = 0;
-  SourceTracker tracker;
-  while (formatted.nextPosition(cfpos, status)) {
-    int32_t category = cfpos.getCategory();
-    int32_t field = cfpos.getField();
-    int32_t start = cfpos.getStart();
-    int32_t limit = cfpos.getLimit();
-
-    if (category == UFIELD_CATEGORY_DATE_INTERVAL_SPAN) {
-      CHECK_LE(field, 2);
-      tracker.Add(field, start, limit);
-    } else {
-      CHECK(category == UFIELD_CATEGORY_DATE);
-      if (start > previous_end_pos) {
-        // Add "literal" from the previous end position to the start if
-        // necessary.
-        Maybe<bool> maybe_added =
-            AddPartForFormatRange(isolate, array, result, index, -1,
-                                  previous_end_pos, start, tracker);
-        MAYBE_RETURN(maybe_added, Handle<JSArray>());
-        previous_end_pos = start;
-        index++;
-      }
-      Maybe<bool> maybe_added = AddPartForFormatRange(
-          isolate, array, result, index, field, start, limit, tracker);
-      MAYBE_RETURN(maybe_added, Handle<JSArray>());
-      previous_end_pos = limit;
-      ++index;
-    }
-  }
-  int32_t end = result.length();
-  // Add "literal" in the end if necessary.
-  if (end > previous_end_pos) {
-    Maybe<bool> maybe_added = AddPartForFormatRange(
-        isolate, array, result, index, -1, previous_end_pos, end, tracker);
-    MAYBE_RETURN(maybe_added, Handle<JSArray>());
-  }
 
-  if (U_FAILURE(status)) {
-    THROW_NEW_ERROR(isolate, NewTypeError(MessageTemplate::kIcuError), JSArray);
-  }
+  // TODO(ftang) To be implemented after ICU64 landed that support
+  // DateIntervalFormat::formatToValue() and FormattedDateInterval.
 
   JSObject::ValidateElements(*array);
   return array;
@@ -1836,7 +1793,7 @@ template <typename T>
 MaybeHandle<T> FormatRangeCommon(
     Isolate* isolate, Handle<JSDateTimeFormat> date_time_format, double x,
     double y,
-    MaybeHandle<T> (*formatToResult)(Isolate*, const icu::FormattedValue&)) {
+    MaybeHandle<T> (*formatToResult)(Isolate*, const icu::DateInterval&, const icu::DateIntervalFormat&)) {
   // #sec-partitiondatetimerangepattern
   // 1. Let x be TimeClip(x).
   x = DateCache::TimeClip(x);
@@ -1860,13 +1817,7 @@ MaybeHandle<T> FormatRangeCommon(
     THROW_NEW_ERROR(isolate, NewTypeError(MessageTemplate::kIcuError), T);
   }
 
-  UErrorCode status = U_ZERO_ERROR;
-  icu::FormattedDateInterval formatted =
-      format->formatToValue(interval, status);
-  if (U_FAILURE(status)) {
-    THROW_NEW_ERROR(isolate, NewTypeError(MessageTemplate::kIcuError), T);
-  }
-  return formatToResult(isolate, formatted);
+  return formatToResult(isolate, interval, *format);
 }
 
 }  // namespace
@@ -1875,7 +1826,7 @@ MaybeHandle<String> JSDateTimeFormat::Fo
     Isolate* isolate, Handle<JSDateTimeFormat> date_time_format, double x,
     double y) {
   return FormatRangeCommon<String>(isolate, date_time_format, x, y,
-                                   Intl::FormattedToString);
+                                   Intl::FormattedDateIntervalToString);
 }
 
 MaybeHandle<JSArray> JSDateTimeFormat::FormatRangeToParts(
--- a/v8/src/objects/js-number-format.cc
+++ b/v8/src/objects/js-number-format.cc
@@ -1261,32 +1261,44 @@ Maybe<icu::UnicodeString> IcuFormatNumbe
     Isolate* isolate,
     const icu::number::LocalizedNumberFormatter& number_format,
     Handle<Object> numeric_obj, icu::FieldPositionIterator* fp_iter) {
+  icu::UnicodeString result;
   // If it is BigInt, handle it differently.
   UErrorCode status = U_ZERO_ERROR;
-  icu::number::FormattedNumber formatted;
   if (numeric_obj->IsBigInt()) {
     Handle<BigInt> big_int = Handle<BigInt>::cast(numeric_obj);
     Handle<String> big_int_string;
     ASSIGN_RETURN_ON_EXCEPTION_VALUE(isolate, big_int_string,
                                      BigInt::ToString(isolate, big_int),
                                      Nothing<icu::UnicodeString>());
-    formatted = number_format.formatDecimal(
+    icu::number::FormattedNumber formatted = number_format.formatDecimal(
         {big_int_string->ToCString().get(), big_int_string->length()}, status);
+    if (U_FAILURE(status)) {
+      // This happen because of icu data trimming trim out "unit".
+      // See https://bugs.chromium.org/p/v8/issues/detail?id=8641
+      THROW_NEW_ERROR_RETURN_VALUE(isolate,
+                                   NewTypeError(MessageTemplate::kIcuError),
+                                   Nothing<icu::UnicodeString>());
+    }
+    if (fp_iter) {
+      formatted.getAllFieldPositions(*fp_iter, status);
+    }
+    result = formatted.toString(status);
   } else {
     double number = numeric_obj->Number();
-    formatted = number_format.formatDouble(number, status);
-  }
-  if (U_FAILURE(status)) {
-    // This happen because of icu data trimming trim out "unit".
-    // See https://bugs.chromium.org/p/v8/issues/detail?id=8641
-    THROW_NEW_ERROR_RETURN_VALUE(isolate,
-                                 NewTypeError(MessageTemplate::kIcuError),
-                                 Nothing<icu::UnicodeString>());
-  }
-  if (fp_iter) {
-    formatted.getAllFieldPositions(*fp_iter, status);
+    icu::number::FormattedNumber formatted =
+        number_format.formatDouble(number, status);
+    if (U_FAILURE(status)) {
+      // This happen because of icu data trimming trim out "unit".
+      // See https://bugs.chromium.org/p/v8/issues/detail?id=8641
+      THROW_NEW_ERROR_RETURN_VALUE(isolate,
+                                   NewTypeError(MessageTemplate::kIcuError),
+                                   Nothing<icu::UnicodeString>());
+    }
+    if (fp_iter) {
+      formatted.getAllFieldPositions(*fp_iter, status);
+    }
+    result = formatted.toString(status);
   }
-  icu::UnicodeString result = formatted.toString(status);
   if (U_FAILURE(status)) {
     THROW_NEW_ERROR_RETURN_VALUE(isolate,
                                  NewTypeError(MessageTemplate::kIcuError),
@@ -1472,6 +1484,22 @@ Maybe<int> ConstructParts(Isolate* isola
 
 }  // namespace
 
+// From chromium 74
+Maybe<int> JSNumberFormat::FormatToParts(Isolate* isolate,
+                                         Handle<JSArray> result,
+                                         int start_index,
+                                         const icu::number::LocalizedNumberFormatter& number_format,
+                                         Handle<Object> numeric_obj,
+                                         Handle<String> unit) {
+  DCHECK(numeric_obj->IsNumeric());
+  icu::FieldPositionIterator fp_iter;
+  Maybe<icu::UnicodeString> maybe_format =
+      IcuFormatNumber(isolate, number_format, numeric_obj, &fp_iter);
+  MAYBE_RETURN(maybe_format, Nothing<int>());
+  return ConstructParts(isolate, maybe_format.FromJust(), &fp_iter, result,
+                        start_index, numeric_obj, !unit.is_null());
+}
+
 MaybeHandle<JSArray> JSNumberFormat::FormatToParts(
     Isolate* isolate, Handle<JSNumberFormat> number_format,
     Handle<Object> numeric_obj) {
--- a/v8/src/objects/js-number-format.h
+++ b/v8/src/objects/js-number-format.h
@@ -50,6 +50,12 @@ class JSNumberFormat : public JSObject {
       Isolate* isolate, Handle<JSNumberFormat> number_format,
       Handle<Object> numeric_obj);
 
+  // From chromium 74
+  V8_WARN_UNUSED_RESULT static Maybe<int> FormatToParts(
+      Isolate* isolate, Handle<JSArray> result, int start_index,
+      const icu::number::LocalizedNumberFormatter& nf,
+      Handle<Object> numeric_obj, Handle<String> unit);
+
   V8_WARN_UNUSED_RESULT static MaybeHandle<String> FormatNumeric(
       Isolate* isolate,
       const icu::number::LocalizedNumberFormatter& number_format,
--- a/chrome/browser/ui/views/native_file_system/native_file_system_usage_bubble_view.cc
+++ b/chrome/browser/ui/views/native_file_system/native_file_system_usage_bubble_view.cc
@@ -27,7 +27,7 @@
 #include "content/public/browser/web_contents.h"
 #include "third_party/icu/source/common/unicode/unistr.h"
 #include "third_party/icu/source/common/unicode/utypes.h"
-#include "third_party/icu/source/i18n/unicode/listformatter.h"
+#include <unicode/listformatter.h>
 #include "ui/base/l10n/l10n_util.h"
 #include "ui/gfx/paint_vector_icon.h"
 #include "ui/views/controls/button/image_button.h"
--- a/v8/src/objects/js-plural-rules.cc
+++ b/v8/src/objects/js-plural-rules.cc
@@ -191,10 +191,7 @@ MaybeHandle<String> JSPluralRules::Resol
       fmt->formatDouble(number, status);
   CHECK(U_SUCCESS(status));
 
-  icu::UnicodeString result =
-      icu_plural_rules->select(formatted_number, status);
-  CHECK(U_SUCCESS(status));
-
+  icu::UnicodeString result = icu_plural_rules->select(number);
   return Intl::ToString(isolate, result);
 }
 
