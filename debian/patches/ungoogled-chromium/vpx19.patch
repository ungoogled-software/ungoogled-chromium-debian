--- a/media/gpu/vaapi/BUILD.gn
+++ b/media/gpu/vaapi/BUILD.gn
@@ -65,8 +65,6 @@
     "vp8_vaapi_video_decoder_delegate.h",
     "vp9_encoder.cc",
     "vp9_encoder.h",
-    "vp9_rate_control.cc",
-    "vp9_rate_control.h",
     "vp9_temporal_layers.cc",
     "vp9_temporal_layers.h",
     "vp9_vaapi_video_decoder_delegate.cc",
--- a/media/gpu/vaapi/vp9_encoder.cc
+++ b/media/gpu/vaapi/vp9_encoder.cc
@@ -12,7 +12,6 @@
 #include "media/gpu/macros.h"
 #include "media/gpu/vaapi/vp9_rate_control.h"
 #include "media/gpu/vaapi/vp9_temporal_layers.h"
-#include "third_party/libvpx/source/libvpx/vp9/ratectrl_rtc.h"
 
 namespace media {
 
@@ -114,47 +113,6 @@
   return bitrate_allocation;
 }
 
-libvpx::VP9RateControlRtcConfig CreateRateControlConfig(
-    const gfx::Size encode_size,
-    const VP9Encoder::EncodeParams& encode_params,
-    const VideoBitrateAllocation& bitrate_allocation,
-    const size_t num_temporal_layers) {
-  libvpx::VP9RateControlRtcConfig rc_cfg{};
-  rc_cfg.width = encode_size.width();
-  rc_cfg.height = encode_size.height();
-  rc_cfg.max_quantizer =
-      QindexToQuantizer(encode_params.scaling_settings.max_qp);
-  rc_cfg.min_quantizer =
-      QindexToQuantizer(encode_params.scaling_settings.min_qp);
-  // libvpx::VP9RateControlRtcConfig is kbps.
-  rc_cfg.target_bandwidth = encode_params.bitrate_allocation.GetSumBps() / 1000;
-  // These default values come from
-  // //third_party/webrtc/modules/video_coding/codecs/vp9/vp9_impl.cc.
-  rc_cfg.buf_initial_sz = 500;
-  rc_cfg.buf_optimal_sz = 600;
-  rc_cfg.buf_sz = 1000;
-  rc_cfg.undershoot_pct = 50;
-  rc_cfg.overshoot_pct = 50;
-  rc_cfg.max_intra_bitrate_pct = MaxSizeOfKeyframeAsPercentage(
-      rc_cfg.buf_optimal_sz, encode_params.framerate);
-  rc_cfg.framerate = encode_params.framerate;
-
-  // Spatial layers variables.
-  rc_cfg.ss_number_layers = 1;
-  rc_cfg.scaling_factor_num[0] = 1;
-  rc_cfg.scaling_factor_den[0] = 1;
-  // Fill temporal layers variables.
-  rc_cfg.ts_number_layers = num_temporal_layers;
-  int bitrate_sum = 0;
-  for (size_t ti = 0; ti < num_temporal_layers; ti++) {
-    rc_cfg.max_quantizers[ti] = rc_cfg.max_quantizer;
-    rc_cfg.min_quantizers[ti] = rc_cfg.min_quantizer;
-    bitrate_sum += bitrate_allocation.GetBitrateBps(0, ti);
-    rc_cfg.layer_target_bitrate[ti] = bitrate_sum / 1000;
-    rc_cfg.ts_rate_decimator[ti] = 1u << (num_temporal_layers - ti - 1);
-  }
-  return rc_cfg;
-}
 }  // namespace
 
 VP9Encoder::EncodeParams::EncodeParams()
@@ -166,11 +124,6 @@
       scaling_settings(kMinQP, kMaxQP),
       error_resilient_mode(false) {}
 
-void VP9Encoder::set_rate_ctrl_for_testing(
-    std::unique_ptr<VP9RateControl> rate_ctrl) {
-  rate_ctrl_ = std::move(rate_ctrl);
-}
-
 void VP9Encoder::Reset() {
   current_params_ = EncodeParams();
   reference_frames_.Clear();
@@ -225,23 +178,12 @@
           std::make_unique<VP9TemporalLayers>(num_temporal_layers);
     }
     current_params_.scaling_settings.max_qp = kMaxQPForSoftwareRateCtrl;
-
-    // |rate_ctrl_| might be injected for tests.
-    if (!rate_ctrl_) {
-      rate_ctrl_ = VP9RateControl::Create(CreateRateControlConfig(
-          visible_size_, current_params_, initial_bitrate_allocation,
-          num_temporal_layers));
-    }
-    if (!rate_ctrl_)
-      return false;
   } else {
     if (config.HasTemporalLayer()) {
       DVLOGF(1) << "Temporal layer encoding works only when in "
                 << "kConstantQuantizationParameter";
       return false;
     }
-    DCHECK(!rate_ctrl_) << "|rate_ctrl_| should only be configured when in "
-                           "kConstantQuantizationParameter";
   }
 
   return UpdateRates(initial_bitrate_allocation,
@@ -309,14 +251,12 @@
 
 void VP9Encoder::BitrateControlUpdate(uint64_t encoded_chunk_size_bytes) {
   if (accelerator_->bitrate_control() !=
-          BitrateControl::kConstantQuantizationParameter ||
-      !rate_ctrl_) {
+          BitrateControl::kConstantQuantizationParameter) {
     DLOG(ERROR) << __func__ << "() is called when no bitrate controller exists";
     return;
   }
 
   DVLOGF(4) << "|encoded_chunk_size_bytes|=" << encoded_chunk_size_bytes;
-  rate_ctrl_->PostEncodeUpdate(encoded_chunk_size_bytes);
 }
 
 bool VP9Encoder::UpdateRates(const VideoBitrateAllocation& bitrate_allocation,
@@ -340,13 +280,8 @@
       current_params_.bitrate_allocation.GetSumBps() *
       current_params_.cpb_window_size_ms / 1000;
 
-  if (!rate_ctrl_)
-    return true;
-
   const size_t num_temporal_layers =
       temporal_layers_ ? temporal_layers_->num_layers() : 1u;
-  rate_ctrl_->UpdateRateControl(CreateRateControlConfig(
-      visible_size_, current_params_, bitrate_allocation, num_temporal_layers));
   return true;
 }
 
@@ -396,22 +331,6 @@
       ref_frames_used->fill(true);
     }
   }
-
-  if (!rate_ctrl_)
-    return;
-
-  libvpx::VP9FrameParamsQpRTC frame_params{};
-  frame_params.frame_type =
-      keyframe ? FRAME_TYPE::KEY_FRAME : FRAME_TYPE::INTER_FRAME;
-  if (picture->metadata_for_encoding) {
-    frame_params.temporal_layer_id =
-        picture->metadata_for_encoding->temporal_idx;
-  }
-  rate_ctrl_->ComputeQP(frame_params);
-  picture->frame_hdr->quant_params.base_q_idx = rate_ctrl_->GetQP();
-  picture->frame_hdr->loop_filter.level = rate_ctrl_->GetLoopfilterLevel();
-  DVLOGF(4) << "qp=" << rate_ctrl_->GetQP()
-            << ", filter_level=" << rate_ctrl_->GetLoopfilterLevel();
 }
 
 void VP9Encoder::UpdateReferenceFrames(scoped_refptr<VP9Picture> picture) {
--- a/media/gpu/vaapi/vp9_encoder.h
+++ b/media/gpu/vaapi/vp9_encoder.h
@@ -20,7 +20,6 @@
 
 namespace media {
 class VP9TemporalLayers;
-class VP9RateControl;
 
 class VP9Encoder : public AcceleratedVideoEncoder {
  public:
@@ -101,8 +100,6 @@
  private:
   friend class VP9EncoderTest;
 
-  void set_rate_ctrl_for_testing(std::unique_ptr<VP9RateControl> rate_ctrl);
-
   Vp9FrameHeader GetDefaultFrameHeader(const bool keyframe) const;
   void SetFrameHeader(bool keyframe,
                       VP9Picture* picture,
@@ -122,7 +119,6 @@
   Vp9ReferenceFrameVector reference_frames_;
   std::unique_ptr<VP9TemporalLayers> temporal_layers_;
 
-  std::unique_ptr<VP9RateControl> rate_ctrl_;
   const std::unique_ptr<Accelerator> accelerator_;
 
   SEQUENCE_CHECKER(sequence_checker_);
--- a/third_party/webrtc/modules/video_coding/codecs/vp9/vp9_impl.cc
+++ b/third_party/webrtc/modules/video_coding/codecs/vp9/vp9_impl.cc
@@ -810,8 +810,6 @@
     for (int si = 0; si < num_spatial_layers_; ++si) {
       svc_params_.speed_per_layer[si] =
           performance_flags_by_spatial_index_[si].base_layer_speed;
-      svc_params_.loopfilter_ctrl[si] =
-          performance_flags_by_spatial_index_[si].deblock_mode;
     }
   }
 
