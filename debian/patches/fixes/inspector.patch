description: use inspector_protocol from top level third_party dir
author: Michael Gilbert <mgilbert@debian.org>

--- a/v8/src/inspector/BUILD.gn
+++ b/v8/src/inspector/BUILD.gn
@@ -4,7 +4,7 @@
 
 import("../../gni/v8.gni")
 
-_inspector_protocol = v8_path_prefix + "/third_party/inspector_protocol"
+_inspector_protocol = "../../../third_party/inspector_protocol"
 import("$_inspector_protocol/inspector_protocol.gni")
 
 _protocol_generated = [
@@ -84,7 +84,7 @@ v8_source_set("inspector") {
     ":inspector_string_conversions",
     "../..:v8_tracing",
     "../..:v8_version",
-    "../../third_party/inspector_protocol:crdtp",
+    "../../../third_party/inspector_protocol:crdtp",
   ]
 
   public_deps = [
--- a/v8/test/unittests/BUILD.gn
+++ b/v8/test/unittests/BUILD.gn
@@ -450,7 +450,7 @@ v8_source_set("unittests_sources") {
     "../..:v8_libbase",
     "../..:v8_libplatform",
     "../..:wasm_test_common",
-    "../../third_party/inspector_protocol:crdtp_test",
+    "../../../third_party/inspector_protocol:crdtp_test",
     "//build/win:default_exe_manifest",
     "//testing/gmock",
     "//testing/gtest",
--- a/v8/src/inspector/inspector_protocol_config.json
+++ b/v8/src/inspector/inspector_protocol_config.json
@@ -48,6 +48,6 @@
     },
 
     "crdtp": {
-        "namespace": "v8_crdtp"
+        "namespace": "crdtp"
     }
 }
--- a/v8/src/inspector/v8-inspector-session-impl.cc
+++ b/v8/src/inspector/v8-inspector-session-impl.cc
@@ -26,12 +26,12 @@
 
 namespace v8_inspector {
 namespace {
-using v8_crdtp::span;
-using v8_crdtp::SpanFrom;
-using v8_crdtp::Status;
-using v8_crdtp::cbor::CheckCBORMessage;
-using v8_crdtp::json::ConvertCBORToJSON;
-using v8_crdtp::json::ConvertJSONToCBOR;
+using crdtp::span;
+using crdtp::SpanFrom;
+using crdtp::Status;
+using crdtp::cbor::CheckCBORMessage;
+using crdtp::json::ConvertCBORToJSON;
+using crdtp::json::ConvertJSONToCBOR;
 
 bool IsCBORMessage(StringView msg) {
   return msg.is8Bit() && msg.length() >= 2 && msg.characters8()[0] == 0xd8 &&
@@ -196,8 +196,8 @@ void V8InspectorSessionImpl::SendProtoco
 }
 
 void V8InspectorSessionImpl::FallThrough(int callId,
-                                         const v8_crdtp::span<uint8_t> method,
-                                         v8_crdtp::span<uint8_t> message) {
+                                         const crdtp::span<uint8_t> method,
+                                         crdtp::span<uint8_t> message) {
   // There's no other layer to handle the command.
   UNREACHABLE();
 }
@@ -344,8 +344,8 @@ void V8InspectorSessionImpl::reportAllCo
 }
 
 void V8InspectorSessionImpl::dispatchProtocolMessage(StringView message) {
-  using v8_crdtp::span;
-  using v8_crdtp::SpanFrom;
+  using crdtp::span;
+  using crdtp::SpanFrom;
   span<uint8_t> cbor;
   std::vector<uint8_t> converted_cbor;
   if (IsCBORMessage(message)) {
@@ -358,21 +358,21 @@ void V8InspectorSessionImpl::dispatchPro
     auto status = ConvertToCBOR(message, &converted_cbor);
     if (!status.ok()) {
       m_channel->sendNotification(
-          serializeForFrontend(v8_crdtp::CreateErrorNotification(
-              v8_crdtp::DispatchResponse::ParseError(status.ToASCIIString()))));
+          serializeForFrontend(crdtp::CreateErrorNotification(
+              crdtp::DispatchResponse::ParseError(status.ToASCIIString()))));
       return;
     }
     cbor = SpanFrom(converted_cbor);
   }
-  v8_crdtp::Dispatchable dispatchable(cbor);
+  crdtp::Dispatchable dispatchable(cbor);
   if (!dispatchable.ok()) {
     if (dispatchable.HasCallId()) {
       m_channel->sendNotification(serializeForFrontend(
-          v8_crdtp::CreateErrorNotification(dispatchable.DispatchError())));
+          crdtp::CreateErrorNotification(dispatchable.DispatchError())));
     } else {
       m_channel->sendResponse(
           dispatchable.CallId(),
-          serializeForFrontend(v8_crdtp::CreateErrorResponse(
+          serializeForFrontend(crdtp::CreateErrorResponse(
               dispatchable.CallId(), dispatchable.DispatchError())));
     }
     return;
--- a/v8/src/inspector/string-16.cc
+++ b/v8/src/inspector/string-16.cc
@@ -239,7 +239,7 @@ std::string String16::utf8() const {
 
 }  // namespace v8_inspector
 
-namespace v8_crdtp {
+namespace crdtp {
 void SerializerTraits<v8_inspector::String16>::Serialize(
     const v8_inspector::String16& str, std::vector<uint8_t>* out) {
   cbor::EncodeFromUTF16(
--- a/v8/src/inspector/string-16.h
+++ b/v8/src/inspector/string-16.h
@@ -169,7 +169,7 @@ struct hash<v8_inspector::String16> {
 #endif  // !defined(__APPLE__) || defined(_LIBCPP_VERSION)
 
 // See third_party/inspector_protocol/crdtp/serializer_traits.h.
-namespace v8_crdtp {
+namespace crdtp {
 template <>
 struct SerializerTraits<v8_inspector::String16> {
   static void Serialize(const v8_inspector::String16& str,
--- a/v8/src/inspector/v8-inspector-session-impl.h
+++ b/v8/src/inspector/v8-inspector-session-impl.h
@@ -105,8 +105,8 @@ class V8InspectorSessionImpl : public V8
       int callId, std::unique_ptr<protocol::Serializable> message) override;
   void SendProtocolNotification(
       std::unique_ptr<protocol::Serializable> message) override;
-  void FallThrough(int callId, v8_crdtp::span<uint8_t> method,
-                   v8_crdtp::span<uint8_t> message) override;
+  void FallThrough(int callId, crdtp::span<uint8_t> method,
+                   crdtp::span<uint8_t> message) override;
   void FlushProtocolNotifications() override;
 
   std::unique_ptr<StringBuffer> serializeForFrontend(
--- a/v8/src/inspector/injected-script.cc
+++ b/v8/src/inspector/injected-script.cc
@@ -724,8 +724,8 @@ Response InjectedScript::resolveCallArgu
     String16 value;
     if (callArgument->hasValue()) {
       std::vector<uint8_t> json;
-      v8_crdtp::json::ConvertCBORToJSON(
-          v8_crdtp::SpanFrom(callArgument->getValue(nullptr)->Serialize()),
+      crdtp::json::ConvertCBORToJSON(
+          crdtp::SpanFrom(callArgument->getValue(nullptr)->Serialize()),
           &json);
       value =
           "(" +
--- a/v8/src/inspector/custom-preview.cc
+++ b/v8/src/inspector/custom-preview.cc
@@ -121,7 +121,7 @@ bool substituteObjectTags(int sessionId,
       return false;
     }
     std::vector<uint8_t> json;
-    v8_crdtp::json::ConvertCBORToJSON(v8_crdtp::SpanFrom(wrapper->Serialize()),
+    crdtp::json::ConvertCBORToJSON(crdtp::SpanFrom(wrapper->Serialize()),
                                       &json);
     v8::Local<v8::Value> jsonWrapper;
     v8_inspector::StringView serialized(json.data(), json.size());
--- a/v8/src/inspector/v8-stack-trace-impl.cc
+++ b/v8/src/inspector/v8-stack-trace-impl.cc
@@ -11,9 +11,9 @@
 #include "src/inspector/v8-inspector-impl.h"
 #include "src/tracing/trace-event.h"
 
-using v8_crdtp::SpanFrom;
-using v8_crdtp::json::ConvertCBORToJSON;
-using v8_crdtp::json::ConvertJSONToCBOR;
+using crdtp::SpanFrom;
+using crdtp::json::ConvertCBORToJSON;
+using crdtp::json::ConvertJSONToCBOR;
 
 namespace v8_inspector {
 
@@ -139,10 +139,10 @@ V8StackTraceId::V8StackTraceId(StringVie
   std::vector<uint8_t> cbor;
   if (json.is8Bit()) {
     ConvertJSONToCBOR(
-        v8_crdtp::span<uint8_t>(json.characters8(), json.length()), &cbor);
+        crdtp::span<uint8_t>(json.characters8(), json.length()), &cbor);
   } else {
     ConvertJSONToCBOR(
-        v8_crdtp::span<uint16_t>(json.characters16(), json.length()), &cbor);
+        crdtp::span<uint16_t>(json.characters16(), json.length()), &cbor);
   }
   auto dict = protocol::DictionaryValue::cast(
       protocol::Value::parseBinary(cbor.data(), cbor.size()));
@@ -169,7 +169,7 @@ std::unique_ptr<StringBuffer> V8StackTra
   dict->setString(kDebuggerId, V8DebuggerId(debugger_id).toString());
   dict->setBoolean(kShouldPause, should_pause);
   std::vector<uint8_t> json;
-  v8_crdtp::json::ConvertCBORToJSON(v8_crdtp::SpanFrom(dict->Serialize()),
+  crdtp::json::ConvertCBORToJSON(crdtp::SpanFrom(dict->Serialize()),
                                     &json);
   return StringBufferFrom(std::move(json));
 }
--- a/v8/src/inspector/string-util.cc
+++ b/v8/src/inspector/string-util.cc
@@ -245,7 +245,7 @@ String16 stackTraceIdToString(uintptr_t
 
 }  // namespace v8_inspector
 
-namespace v8_crdtp {
+namespace crdtp {
 
 using v8_inspector::String16;
 using v8_inspector::protocol::Binary;
--- a/v8/src/inspector/string-util.h
+++ b/v8/src/inspector/string-util.h
@@ -86,7 +86,7 @@ String16 stackTraceIdToString(uintptr_t
 }  // namespace v8_inspector
 
 // See third_party/inspector_protocol/crdtp/serializer_traits.h.
-namespace v8_crdtp {
+namespace crdtp {
 
 template <>
 struct ProtocolTypeTraits<v8_inspector::String16> {
--- a/v8/src/inspector/v8-debugger-agent-impl.cc
+++ b/v8/src/inspector/v8-debugger-agent-impl.cc
@@ -1607,8 +1607,8 @@ void V8DebuggerAgentImpl::didParseSource
     // execution context id.
     const String16& aux = inspected->auxData();
     std::vector<uint8_t> cbor;
-    v8_crdtp::json::ConvertJSONToCBOR(
-        v8_crdtp::span<uint16_t>(aux.characters16(), aux.length()), &cbor);
+    crdtp::json::ConvertJSONToCBOR(
+        crdtp::span<uint16_t>(aux.characters16(), aux.length()), &cbor);
     executionContextAuxData = protocol::DictionaryValue::cast(
         protocol::Value::parseBinary(cbor.data(), cbor.size()));
   }
--- a/v8/src/inspector/v8-runtime-agent-impl.cc
+++ b/v8/src/inspector/v8-runtime-agent-impl.cc
@@ -870,8 +870,8 @@ void V8RuntimeAgentImpl::reportExecution
   const String16& aux = context->auxData();
   if (!aux.isEmpty()) {
     std::vector<uint8_t> cbor;
-    v8_crdtp::json::ConvertJSONToCBOR(
-        v8_crdtp::span<uint16_t>(aux.characters16(), aux.length()), &cbor);
+    crdtp::json::ConvertJSONToCBOR(
+        crdtp::span<uint16_t>(aux.characters16(), aux.length()), &cbor);
     description->setAuxData(protocol::DictionaryValue::cast(
         protocol::Value::parseBinary(cbor.data(), cbor.size())));
   }
